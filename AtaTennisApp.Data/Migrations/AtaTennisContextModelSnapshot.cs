// <auto-generated />
using System;
using AtaTennisApp.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AtaTennisApp.Data.Migrations
{
    [DbContext(typeof(AtaTennisContext))]
    partial class AtaTennisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AtaTennisApp.Data.Entities.Draw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountOfPlayers");

                    b.Property<int>("Round");

                    b.Property<int>("TournamentId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId")
                        .IsUnique()
                        .HasName("FK_Draw_Tournament");

                    b.ToTable("Draw");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.DrawMatch", b =>
                {
                    b.Property<int>("DrawId");

                    b.Property<int>("MatchId");

                    b.HasKey("DrawId", "MatchId")
                        .HasName("PK__DrawMatc__0696BFAF7276884F");

                    b.HasIndex("MatchId");

                    b.ToTable("DrawMatch");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Retired");

                    b.Property<int>("Score");

                    b.Property<int>("TournamentId");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId")
                        .HasName("fkIdx_Match_Tournament");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.MatchPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchId");

                    b.Property<int>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .HasName("fkIdx_MatchPlayer_Match");

                    b.HasIndex("PlayerId")
                        .HasName("fkIdx_MatchPlayer_Player");

                    b.ToTable("MatchPlayer");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<bool?>("Backhand");

                    b.Property<string>("FavouritePlayer")
                        .HasMaxLength(30);

                    b.Property<int?>("FinalistCount");

                    b.Property<bool?>("Forehand");

                    b.Property<int?>("Height");

                    b.Property<bool?>("Member");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Points");

                    b.Property<string>("Racquet")
                        .HasMaxLength(30);

                    b.Property<string>("Residence")
                        .HasMaxLength(50);

                    b.Property<int?>("Surface");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TitlesCount");

                    b.Property<int?>("TournamentCount");

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BallsType");

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PlayingSystem");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Surface");

                    b.Property<int>("TournamentType");

                    b.HasKey("Id");

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.Draw", b =>
                {
                    b.HasOne("AtaTennisApp.Data.Entities.Tournament", "Tournament")
                        .WithOne("Draw")
                        .HasForeignKey("AtaTennisApp.Data.Entities.Draw", "TournamentId")
                        .HasConstraintName("FK_Draw_Tournament")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.DrawMatch", b =>
                {
                    b.HasOne("AtaTennisApp.Data.Entities.Draw", "Draw")
                        .WithMany("DrawMatch")
                        .HasForeignKey("DrawId")
                        .HasConstraintName("FK_DrawMatch_Draw");

                    b.HasOne("AtaTennisApp.Data.Entities.Match", "Match")
                        .WithMany("DrawMatch")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_DrawMatch_Match");
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.Match", b =>
                {
                    b.HasOne("AtaTennisApp.Data.Entities.Tournament", "Tournament")
                        .WithMany("Match")
                        .HasForeignKey("TournamentId")
                        .HasConstraintName("FK_Match_Tournament")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AtaTennisApp.Data.Entities.MatchPlayer", b =>
                {
                    b.HasOne("AtaTennisApp.Data.Entities.Match", "Match")
                        .WithMany("MatchPlayer")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_MatchPlayer_Match");

                    b.HasOne("AtaTennisApp.Data.Entities.Player", "Player")
                        .WithMany("MatchPlayer")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_MatchPlayer_Player");
                });
#pragma warning restore 612, 618
        }
    }
}
