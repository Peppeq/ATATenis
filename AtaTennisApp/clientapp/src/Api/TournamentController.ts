
/* eslint-disable */
// this file is autogenerated by typewriter (used Template.tst file to generate)

import { AjaxProvider } from "../scripts/ajax";



export class TournamentFilter {
    Id: number = null;
    Year: number = null;
    Type: TournamentType = null;
}
export class TournamentDTO {
    Id: number = null;
    Name: string = null;
    StartTime: Date = null;
    EndTime: Date = null;
    Place: string = null;
    Category: TournamentCategory = null;
    PlayingSystem: PlayingSystem = null;
    BallsType: BallsType = null;
    TournamentType: TournamentType = null;
    Surface: SurfaceType = null;
    Description: string = null;
}
export class SearchedTournamentByNameArgs {
    Name: string = null;
}
export class SearchedTournamentDTO {
    TournamentId: number = null;
    Name: string = null;
    StartTime: Date = null;
}
export class TournamentPlayersArgs {
    TournamentId: number = null;
}
export class TournamentPlayersDTO {
    Tournament: TournamentDTO = null;
    Players: PlayerDrawDTO[] = null;
}
export class PlayerDrawDTO {
    TournamentEntryId: number = null;
    PlayerId: number = null;
    Name: string = null;
    Surname: string = null;
}


export const enum TournamentType {
    grandslam = 0,
    ata = 1,
    challanger = 2,
    ataSpecial = 3,
    challangerSpecial = 4
}
export const enum TournamentCategory {
    singles = 0,
    doubles = 1
}
export const enum PlayingSystem {
    complete = 0,
    prince = 1,
    kombi = 2,
    group = 3
}
export const enum BallsType {
    slazenger = 0,
    dunlop = 1
}
export const enum SurfaceType {
    clay = 0,
    grass = 1,
    hard = 2
}

export default class TournamentClient {

    get<TArgs extends TournamentFilter, TResult extends TournamentDTO[]>(data: TArgs): Promise<TResult> {
        return AjaxProvider.apiGet("Tournament", data);
    }

    getSearchedTournamentsByName<TArgs extends SearchedTournamentByNameArgs, TResult extends SearchedTournamentDTO[]>(data: TArgs): Promise<TResult> {
        return AjaxProvider.apiGet("Tournament/GetSearchedTournamentsByName", data);
    }

    getTournamentPlayers<TArgs extends TournamentPlayersArgs, TResult extends TournamentPlayersDTO>(data: TArgs): Promise<TResult> {
        return AjaxProvider.apiGet("Tournament/GetTournamentPlayers", data);
    }

    getWithoutParams<TResult extends TournamentDTO>(): Promise<TResult> {
        return AjaxProvider.apiGet("Tournament/nearestTournament", null);
    }

    addOrEditTournament<TArgs extends TournamentDTO, TResult extends TournamentDTO>(data: TArgs): Promise<TResult> {
        return AjaxProvider.apiPost("Tournament/AddOrEditTournament", data);
    }
}
