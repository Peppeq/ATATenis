


{{ for dtoClass in data.Classes | Symbols.WhereNameEndsWith "DTO"
     dtoClass.FullName | String.Append "\r\n"
  capture output -}} 
  /* eslint-disable 
   this file is autogenerated by typewriter (used Template.tst file to generate) */

  {{~  for dependency in dtoClass | Type.AllReferencedTypes }}
      {{ if dependency.IsEnum }}
import { {{ dependency.BareName }} } from "{{ "../enums/" + dependency.BareName }}";
      {{ else }}
import { {{ dependency.BareName }} } from "{{ "./" + dependency.BareName }}";
    
    {{end}}

{{- end }}

  export class {{dtoClass.BareName}} {
      {{- for property in dtoClass.Properties  }}
        {{ property.Name | String.ToCamelCase }}: {{ property.Type | Type.ToTypeScriptType }} = null;
    {{- end}}
    }

     {{- end 
        filePath =  "dtos/" + dtoClass.BareName | String.Append ".ts"
        Save output filePath
    end }}



    {{ for class in data.Classes | Types.ThatInheritFrom "ApiControllerBase"
     class.FullName | String.Append "\r\n"
  capture output -}} 
    /* eslint-disable 
   this file is autogenerated by typewriter (used Template.tst file to generate) */

  export class {{class.BareName}} {
      {{- for property in class.Properties  }}
        {{ property.Name | String.ToCamelCase }}: {{ property.Type | Type.ToTypeScriptType }} = null;
    {{- end}}
    }

     {{- end 
        filePath =  class.BareName | String.Append ".ts"
        Save output filePath
    end }}



    {{- for enum in data.Enums | Symbols.ThatArePublic
        capture output
}}
  /* eslint-disable 
   this file is autogenerated by typewriter (used Template.tst file to generate) */

export const enum {{ enum.Name }} 
{
{{- for item in enum.Values }}
    {{ item.Name }} = {{ item.Value }},   
{{- end }}
}
{{-     end
   Save output ("enums/" + enum.BareName + ".ts")
   end 
}}

{{~  for class in data.Classes | Types.ThatInheritFrom "ApiControllerBase"
     class.FullName | String.Append "\r\n"
  capture output ~}} 
    /* eslint-disable 
   this file is autogenerated by typewriter (used Template.tst file to generate) */

 {{~  for dependency in class | Type.AllReferencedTypes ~}}
{{~ nc = class.NestedClasses ~}}
{{~ if nc | !String.Contains(dependency.BareName) ~}}
{{~ if dependency.IsEnum ~}}
import { {{~ dependency.BareName ~}} } from "{{~ "./enums/" + dependency.BareName ~}}";
{{~ else if ((dependency | String.Contains("Args")) || (dependency | String.Contains("DTO")))~}}
import { {{ dependency.BareName }} } from "{{ "./dtos/" + dependency.BareName }}";
{{~ end ~}}
{{~ end ~}} 
{{~ end ~}} 
{{~ for nestedClassess in class.NestedClasses ~}}
    {{~ for dependencyNested in nestedClassess | Type.AllReferencedTypes ~}}
 {{~ dnc = class | Type.AllReferencedTypes ~}}
 {{~ if dnc | !String.Contains(dependencyNested.BareName) ~}}
{{~ if dependencyNested.IsEnum ~}}  
import { {{ dependencyNested.BareName }} } from "{{ "./enums/" + dependencyNested.BareName }}";
{{~ else if ((dependencyNested | String.Contains("Args")) || (dependencyNested | String.Contains("DTO"))) ~}} 
import { {{ dependencyNested.BareName }} } from "{{ "./dtos/" + dependencyNested.BareName }}";
{{~ end ~}}
{{~ end ~}}
{{~ end ~}}
{{~ end ~}}
import { AjaxProvider } from "../scripts/ajax";
{{ for nestedClass in class.NestedClasses }}
    
export class {{nestedClass.BareName}} {
{{- for property in nestedClass.Properties  }}
    {{ b = property.Name 
b | String.ToCamelCase() }}: {{ property.Type | Type.ToTypeScriptType }} = null;
{{- end}}
}
{{- end}}

export class {{class.BareName | String.Remove("Controller") | String.Append("Client")}} {
    {{- for method in class.Methods }} 
    {{- for attribute in  method.Attributes}}
    {{- for argument in  attribute.Arguments}}
    {{returnType = argument.Value
    }}{{end
    }}{{end}}{{ 
    test = method | Action.Url;
        functionName = method.Name;
        httpMethod = method | Action.HttpMethod | String.ToUpperFirst;
        parameters = method | Action.Parameters | Parameters.ToTypeScript | Array.Join ", ";
        returnTypes = method | Action.ReturnType;
         # TODO remove any 
        if returnTypes == null; tsReturnType = "any"; else; tsReturnType = returnTypes; end;
        if tsReturnType | String.Contains("IList"); tsReturnType = tsReturnType | String.Remove("IList<") | String.Remove(">") | String.Append("[]");
        else if tsReturnType | String.Contains("List"); tsReturnType = tsReturnType | String.Remove("List<") | String.Remove(">") | String.Append("[]");
        end;
    functionName | String.ToCamelCase() }}{{
    if parameters != "" }}<TArgs extends {{ 
    params = method.Parameters | Regex.Split `\s+` 
    }}{{if (params[0] | String.Contains("int")) || (params[0] | String.Contains("decimal"))}}number
    {{-else}}{{
    params[0] | String.Remove("[") | String.Remove("args]") | String.Remove("]") 
    }}{{end}}, TResult extends {{tsReturnType}}>(data: TArgs): Promise<TResult> {
        return AjaxProvider.api{{httpMethod}}("{{test}}", data);
    }
    
    {{
    else
    }}<TResult extends {{tsReturnType}}>(): Promise<TResult> {
        return AjaxProvider.api{{httpMethod}}("{{test}}", null);
    }{{end}}{{end}} 
}

    {{- end 
    filePath =  class.BareName | String.Append ".ts"
    Save output filePath
end }}
